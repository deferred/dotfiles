#!/usr/bin/env bash

yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"
sudo yabai --load-sa

# focus window after active space changes
yabai -m signal --add event=space_changed action="yabai -m window --focus \$(yabai -m query --windows --space | yq '(.[] | select(."has-fullscreen-zoom"==true).id) // .[-1].id')"

# focus window after active display changes
yabai -m signal --add event=display_changed action="yabai -m window --focus \$(yabai -m query --windows --space | yq '(.[] | select(."has-fullscreen-zoom"==true).id) // .[-1].id')"

# make all non-resizable windows float
# https://github.com/koekeishiya/yabai/issues/1317#issuecomment-1253626905
yabai -m signal --add event=window_created action='yabai -m query --windows --window $YABAI_WINDOW_ID | jq -er ".\"can-resize\" or .\"is-floating\"" || yabai -m window $YABAI_WINDOW_ID --toggle float'

# default layout (can be bsp, stack or float)
yabai -m config layout bsp

# padding set to 8px
yabai -m config top_padding 8
yabai -m config bottom_padding 8
yabai -m config left_padding 8
yabai -m config right_padding 8
yabai -m config window_gap 8

# center mouse on window with focus
yabai -m config mouse_follows_focus on

# modifier for clicking and dragging with mouse
yabai -m config mouse_modifier alt
# set modifier + left-click drag to move window
yabai -m config mouse_action1 move
# set modifier + right-click drag to resize window
yabai -m config mouse_action2 resize

# when window is dropped in center of another window, swap them (on edges it will split it)
yabai -m config mouse_drop_action swap

function setup_spaces {
    for _ in $(yabai -m query --spaces | jq '.[].index | select(. > 8)'); do
        yabai -m space --destroy 9
    done
    
    # create spaces till there are 8
    while [ $(yabai -m query --spaces | jq length) -lt 8 ]; do
        yabai -m space --create
    done
    
    for i in "web 1 l" "terminal 2 l" "code 3 l" "random 4 l" "slack 5 s" "email 6 s" "teams 7 s" "telegram 8 s"; do
        # convert the "tuple" into the param args $1 $2...
        set -- $i 
        local space_label="$1"
        local space_idx="$2"
        local display_size="$3"

        # set labels to corresponding spaces
        yabai -m space "$space_idx" --label "$space_label"

        # get display indices
        local display_idx=
        if [ "$display_size" = "l" ]; then
            display_idx=$(yabai -m query --displays | jq 'max_by(.frame.w).index') 
        else
            display_idx=$(yabai -m query --displays | jq 'min_by(.frame.w).index') 
        fi
        
        echo "sending space $space_label with index $space_idx to display $display_idx"
        # send spaces to corresponding displays
        yabai -m space "$space_idx" --display "$display_idx"
    done


}

setup_spaces

# yabai -m signal --add event=display_added action="sudo yabai --load-sa"
# yabai -m signal --add event=display_removed action="sudo yabai --load-sa"

# turn off yabai for some apps
yabai -m rule --add app="^Calculator$" manage=off
yabai -m rule --add app="^Karabiner-Elements$" manage=off

# move some apps automatically to specific spaces
yabai -m rule --add app="^Safari$" space=^1
yabai -m rule --add app="^Firefox$" space=^1
yabai -m rule --add app="^iTerm2$" space=2
yabai -m rule --add app="^PyCharm$" space=3
yabai -m rule --add app="^Insomnia$" space=4
yabai -m rule --add app="^Slack$" space=5
yabai -m rule --add app="^Microsoft Outlook$" space=6
yabai -m rule --add app="^Microsoft Teams$" space=7
yabai -m rule --add app="^Telegram$" space=8

